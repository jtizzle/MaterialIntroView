/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * When preparing to deploy to the maven repository:
 *
 * -appending -SNAPSHOT to the end of 'version' will cause the artifact to go to the snapshot repository.
 * this is ideal for rapid development when changes are happening.
 *
 * -removing -SNAPSHOT from the end of 'version' will cause the artifact to go to the release repository and for the artifact to be signed.
 * this is ideal when releasing what can be considered a stable version. This should not be happening too frequently.
 *
 * Doing it this way avoids confusion about stable builds and allows them to be seperated.
 *
 * Internally, we probably want to use -SNAPSHOT in our application at least until a stable 1.0 release.
 *
 * The idea is, at the end of sprint/day/week whenever needed, one person can deploy a snapshot to the repository
 *
 *
 *    A few other notes...
 *
 *    be sure to set USERNAME and PASSWORD variables in your ~/.gradle/gradle.properties file. This is the "Global Properties" file unique to you.
 *    These are the usernames and passwords for the repository.
 *    for example, you would set
 *
 *    USERNAME=yourUsername
 *    PASSWORD=yourPassword
 *
 *    !Do not put quites around your username and password!
 *
 *    Whenever you wish to deploy to the repository,
 *    1. adjust the 'version'
 *    2. run ./gradlew clean uploadArchives
*/


apply plugin: 'maven'
apply plugin: 'signing'

def groupId = project.PUBLISH_GROUP_ID
def artifactId = project.PUBLISH_ARTIFACT_ID
def version = project.PUBLISH_VERSION+"-SNAPSHOT"

def mavenUrl = getMavenUrl()
def mavenUrlSnapshot = getMavenUrlSnapshot()

def localReleaseDest = "${buildDir}/release/${version}"


def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

def getMavenUrl(){
    return property("MAVEN_URL")
}

def getMavenUrlSnapshot(){
    return property("MAVEN_URL_SNAPSHOT")
}

def getRepositoryUsername() {
    return hasProperty('USERNAME') ? USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('PASSWORD') ? PASSWORD : ""
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = groupId
                pom.artifactId = artifactId
                pom.version = version

                repository(url: mavenUrl) {
                    authentication(userName: getRepositoryUsername(), password:  getRepositoryPassword())
                }
                snapshotRepository(url: mavenUrlSnapshot) {
                    authentication(userName: getRepositoryUsername(), password:  getRepositoryPassword())
                }

//                pom.project {
//                    name POM_NAME
//                    packaging POM_PACKAGING
//                    description POM_DESCRIPTION
//                    url POM_URL
//
//                    scm {
//                        url POM_SCM_URL
//                        connection POM_SCM_CONNECTION
//                        developerConnection POM_SCM_DEV_CONNECTION
//                    }
//
//                    licenses {
//                        license {
//                            name POM_LICENCE_NAME
//                            url POM_LICENCE_URL
//                            distribution POM_LICENCE_DIST
//                        }
//                    }
//
//                    developers {
//                        developer {
//                            id POM_DEVELOPER_ID
//                            name POM_DEVELOPER_NAME
//                        }
//                    }
//                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        failOnError false
        if (JavaVersion.current().isJava8Compatible()) {
            allprojects {
                tasks.withType(Javadoc) {
                    options.addStringOption('Xdoclint:none', '-quiet')
                }
            }
        }
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

//    task androidSourcesJar(type: Jar) {
//        classifier = 'sources'
//        from android.sourceSets.main.java.sourceFiles
//    }

    artifacts {
        //archives androidSourcesJar
        archives androidJavadocsJar
    }
}